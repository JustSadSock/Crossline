param(
    [Parameter(Mandatory = $true)]
    [string]$ProjectDir,
    [int]$TimeoutSeconds = 120
)

$ErrorActionPreference = 'Stop'
$deadline = (Get-Date).AddSeconds($TimeoutSeconds)
$publicUrl = $null

while ((Get-Date) -lt $deadline) {
    try {
        $response = Invoke-RestMethod -Uri 'http://127.0.0.1:4040/api/tunnels' -TimeoutSec 2
        if ($response -and $response.tunnels) {
            $publicUrl = ($response.tunnels | Where-Object { $_.proto -eq 'https' } | Select-Object -First 1).public_url
            if (-not $publicUrl) {
                $publicUrl = ($response.tunnels | Select-Object -First 1).public_url
            }
        }
    } catch {
        Start-Sleep -Seconds 2
        continue
    }

    if ($publicUrl) {
        break
    }

    Start-Sleep -Seconds 2
}

if (-not $publicUrl) {
    throw "Ngrok tunnel was not found within $TimeoutSeconds seconds."
}

try {
    $uri = [Uri]$publicUrl
    $isPrivate = $false
    if ($uri.HostNameType -eq [System.UriHostNameType]::Dns) {
        $isPrivate = $uri.Host -eq 'localhost' -or
            $uri.Host.EndsWith('.local') -or
            $uri.Host.StartsWith('10.') -or
            $uri.Host.StartsWith('192.168.') -or
            $uri.Host.StartsWith('127.')
    }
    $wsScheme = if ($uri.Scheme -eq 'https' -or -not $isPrivate) { 'wss:' } else { 'ws:' }
    $wsUrl = "${wsScheme}//$($uri.Authority)"
} catch {
    $wsUrl = $null
}

if ($publicUrl) {
    $env:CROSSLINE_API_URL = $publicUrl
}
if ($wsUrl) {
    $env:CROSSLINE_WS_URL = $wsUrl
}

$configPath = [IO.Path]::Combine($ProjectDir, 'scripts', '.crossline-tunnel.env')
$configLines = @(
    '# Auto-generated by update-runtime-config.ps1',
    "CROSSLINE_API_URL=$publicUrl"
)
if ($wsUrl) {
    $configLines += "CROSSLINE_WS_URL=$wsUrl"
}

$encoding = New-Object System.Text.UTF8Encoding($false)
[IO.File]::WriteAllLines($configPath, $configLines, $encoding)

$jsonConfig = [ordered]@{}
$jsonConfig['generatedAt'] = (Get-Date).ToUniversalTime().ToString('o')
$jsonConfig['apiOrigin'] = $publicUrl
if ($wsUrl) {
    $jsonConfig['wsOrigin'] = $wsUrl
}

$jsonConfigPath = [IO.Path]::Combine($ProjectDir, 'scripts', 'crossline-runtime-config.json')
$jsonContent = ($jsonConfig | ConvertTo-Json -Depth 2)
[IO.File]::WriteAllText($jsonConfigPath, $jsonContent, $encoding)

Write-Output "TUNNEL_URL=$publicUrl"
if ($wsUrl) {
    Write-Output "WS_URL=$wsUrl"
}
Write-Output "CONFIG_PATH=$configPath"
Write-Output "JSON_CONFIG_PATH=$jsonConfigPath"
